What I done (in every module):

The goal of the first module was to create a CI/CD pipeline with a success criteria that an environment diagram was created, and three VMs were set up: VM1, VM-master, and VM-worker. Jenkins was installed on VM1, and a K8s cluster was deployed on VM-master and VM-worker. Vagrant was used to create the infrastructure. Problems: under +- medium workload it was problematic to manage tasks (OS: Macos Ventura 2.8 GHz Quad-Core Intel Core i7 with 16 GB 2133 MHz LPDDR3 Memory, 2048Mb & 2 Cores to Master and Worker VMs, 2072Mb & 2 Cores to VM1;); bash script was used to manage such infrastructure: setup, destroy etc.
To automate the setup process, bash scripts were used to install all necessary tools and to configure the required settings for proper functioning. The C4-model was used to create a CONTEXT and CONTAINER view, and the vulnerable application from https://github.com/SasanLabs/VulnerableApp was used as a practice application. The tools used to complete this module were Docker, Jenkins, Kubernetes, and Git.
--
The objective of the second module was to integrate static and dynamic application security testing into the pipeline, obtain the test results and perform analysis. The toolset used included SAST, code-level SCA, and DAST. SonarQube was used for static code analysis and was installed on VM1 (port 9090, not default). For SAST, a custom quality profile and quality gate were set up and it was ensured that the pipeline build failed based on the specified conditions (tested on the threshold equal to count of vulnerabilities or 'code smells'). A code-level SCA quality gate was also set up. For DAST, a "test" environment with another one-node K8s cluster was created, and DAST was integrated into the pipeline. A quality gate was set up to allow "production" deployment only on specified conditions. A C4-model (context, container) diagram of the environment was also created.
-- 
The objective of the third module was to implement container-level security and add DockerImage scanning into the pipeline. Docker security was implemented firstly using AppArmor, which was checked and then destroyed to return the system to a 'clean' state to practice with another security tool. Secondly, SELinux was installed on a 'clean' system and checked. I also practiced with seccomp, testing it on creating and running docker containers locally while trying to make some system calls filtered by seccomp profiles. Docker engine hardening was implemented using Ansible based on the CIS Benchmark, and a small automation tool was created to check that the infrastructure met the CIS conditions. A C4-model (context, container) diagram of the environment (not the app) was also created.
--
The objective of the 4-th module was to migrate to cloud-native from self-managed Kubernetes, using Azure virtual machines (not AKS).Infrastructure was created with the help of terraform, and all further management is also made with it. I added k8s YAML files scanning into the pipeline using Checkov and implemented k8s engine hardening using kube-bench tool to check master and worker nodes that they met the CIS conditions. The tools mentioned above were deployed via a separate Jenkins pipeline, and all tools' security checks were also made by running the Jenkins pipeline. OPA Kubernetes Admission Control was configured, installed in a separate namespace in the k8s cluster, and custom policies were implemented. I created a test scenario, which includes creating k8s users and config files for them (contexts), and implemented some logic to allow one user to change some k8s resources and disallow another user from doing so to practice with user access and k8s permissions. I also worked with Falco tool, I tried to install it via Helm and in a separate namespace by providing .yaml file. Finally, a C4-model (context, container) diagram of the environment (not the app) was created.
--
Module 5: Move from VMs level to Cloud cluster level
Goal: Deploy infrastructure in Cloud using IaC and replace VM-based Kubernetes with AKS. Infrastructure was created with the help of terraform, and all further management is also made with it. Success criteria: AKS is implemented and AKS hardening is applied according to the CIS benchmark. Infrastructure is deployed using IaC. DAST pipeline was rewritten to work with AKS and load balancer is used instead of NodePort for app service. In this module, the focus is on moving from a VM-based infrastructure to a cloud-based infrastructure using AKS. The infrastructure is deployed using IaC and AKS hardening is applied according to the CIS benchmark. The DAST pipeline is rewritten to work with AKS and LoadBalancer is used instead of NodePort for app service. This module requires updating Jenkins and its plugins to work with AKS and its k8s. The success criteria are met when AKS is implemented, the infrastructure is deployed using IaC, AKS hardening is applied, and the DAST pipeline works with AKS and load balancer.
--
As a aresult I have scripts, configuration files for different tools and an example infrastructure which can help me to setup an application with chosen level of security on separate VMs, on cloud VMs or on IaS (AKS for example). I had a lot of practice with modern tools which used by professional security analysts and engineers to check that the current infrastructure met the required conditions, and for implementing some kind of hardening. I have made significant progress in setting up a secure and scalable infrastructure for deploying applications. My experience with various security tools and hardening techniques will be valuable in ensuring the security of any future applications which I may deploy.